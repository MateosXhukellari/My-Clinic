/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as ReservationsIndexRouteImport } from "./routes/reservations/index";
import { Route as BookIndexRouteImport } from "./routes/book/index";
import { Route as BookPaymentRouteImport } from "./routes/book/payment";
import { Route as BookFormRouteImport } from "./routes/book/form";
import { Route as AdminAppoinmentsRouteImport } from "./routes/admin/appoinments";
import { Route as AccountSignupRouteImport } from "./routes/account/signup";
import { Route as AccountSiginRouteImport } from "./routes/account/sigin";
import { Route as BookChatRouteImport } from "./routes/book/chat";

const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const ReservationsIndexRoute = ReservationsIndexRouteImport.update({
  id: "/reservations/",
  path: "/reservations/",
  getParentRoute: () => rootRouteImport,
} as any);
const BookIndexRoute = BookIndexRouteImport.update({
  id: "/book/",
  path: "/book/",
  getParentRoute: () => rootRouteImport,
} as any);
const BookPaymentRoute = BookPaymentRouteImport.update({
  id: "/book/payment",
  path: "/book/payment",
  getParentRoute: () => rootRouteImport,
} as any);
const BookFormRoute = BookFormRouteImport.update({
  id: "/book/form",
  path: "/book/form",
  getParentRoute: () => rootRouteImport,
} as any);
const BookChatRoute = BookChatRouteImport.update({
  id: "/book/chat",
  path: "/book/chat",
  getParentRoute: () => rootRouteImport,
} as any);
const AdminAppoinmentsRoute = AdminAppoinmentsRouteImport.update({
  id: "/admin/appoinments",
  path: "/admin/appoinments",
  getParentRoute: () => rootRouteImport,
} as any);
const AccountSignupRoute = AccountSignupRouteImport.update({
  id: "/account/signup",
  path: "/account/signup",
  getParentRoute: () => rootRouteImport,
} as any);
const AccountSiginRoute = AccountSiginRouteImport.update({
  id: "/account/sigin",
  path: "/account/sigin",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/account/sigin": typeof AccountSiginRoute;
  "/account/signup": typeof AccountSignupRoute;
  "/admin/appoinments": typeof AdminAppoinmentsRoute;
  "/book/chat": typeof BookChatRoute;
  "/book/form": typeof BookFormRoute;
  "/book/payment": typeof BookPaymentRoute;
  "/book": typeof BookIndexRoute;
  "/reservations": typeof ReservationsIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/account/sigin": typeof AccountSiginRoute;
  "/account/signup": typeof AccountSignupRoute;
  "/admin/appoinments": typeof AdminAppoinmentsRoute;
  "/book/chat": typeof BookChatRoute;
  "/book/form": typeof BookFormRoute;
  "/book/payment": typeof BookPaymentRoute;
  "/book": typeof BookIndexRoute;
  "/reservations": typeof ReservationsIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/account/sigin": typeof AccountSiginRoute;
  "/account/signup": typeof AccountSignupRoute;
  "/admin/appoinments": typeof AdminAppoinmentsRoute;
  "/book/chat": typeof BookChatRoute;
  "/book/form": typeof BookFormRoute;
  "/book/payment": typeof BookPaymentRoute;
  "/book/": typeof BookIndexRoute;
  "/reservations/": typeof ReservationsIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/account/sigin"
    | "/account/signup"
    | "/admin/appoinments"
    | "/book/chat"
    | "/book/form"
    | "/book/payment"
    | "/book"
    | "/reservations";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/account/sigin"
    | "/account/signup"
    | "/admin/appoinments"
    | "/book/chat"
    | "/book/form"
    | "/book/payment"
    | "/book"
    | "/reservations";
  id:
    | "__root__"
    | "/"
    | "/account/sigin"
    | "/account/signup"
    | "/admin/appoinments"
    | "/book/chat"
    | "/book/form"
    | "/book/payment"
    | "/book/"
    | "/reservations/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AccountSiginRoute: typeof AccountSiginRoute;
  AccountSignupRoute: typeof AccountSignupRoute;
  AdminAppoinmentsRoute: typeof AdminAppoinmentsRoute;
  BookChatRoute: typeof BookChatRoute;
  BookFormRoute: typeof BookFormRoute;
  BookPaymentRoute: typeof BookPaymentRoute;
  BookIndexRoute: typeof BookIndexRoute;
  ReservationsIndexRoute: typeof ReservationsIndexRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/reservations/": {
      id: "/reservations/";
      path: "/reservations";
      fullPath: "/reservations";
      preLoaderRoute: typeof ReservationsIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/book/": {
      id: "/book/";
      path: "/book";
      fullPath: "/book";
      preLoaderRoute: typeof BookIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/book/chat": {
      id: "/book/chat";
      path: "/book/chat";
      fullPath: "/book/chat";
      preLoaderRoute: typeof BookChatRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/book/payment": {
      id: "/book/payment";
      path: "/book/payment";
      fullPath: "/book/payment";
      preLoaderRoute: typeof BookPaymentRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/book/form": {
      id: "/book/form";
      path: "/book/form";
      fullPath: "/book/form";
      preLoaderRoute: typeof BookFormRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/admin/appoinments": {
      id: "/admin/appoinments";
      path: "/admin/appoinments";
      fullPath: "/admin/appoinments";
      preLoaderRoute: typeof AdminAppoinmentsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/account/signup": {
      id: "/account/signup";
      path: "/account/signup";
      fullPath: "/account/signup";
      preLoaderRoute: typeof AccountSignupRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/account/sigin": {
      id: "/account/sigin";
      path: "/account/sigin";
      fullPath: "/account/sigin";
      preLoaderRoute: typeof AccountSiginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountSiginRoute: AccountSiginRoute,
  AccountSignupRoute: AccountSignupRoute,
  AdminAppoinmentsRoute: AdminAppoinmentsRoute,
  BookChatRoute: BookChatRoute,
  BookFormRoute: BookFormRoute,
  BookPaymentRoute: BookPaymentRoute,
  BookIndexRoute: BookIndexRoute,
  ReservationsIndexRoute: ReservationsIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
